+ Rename macros from COMGEN_SOMETHING to DCOMPLUGIN_something
+ Rename macro COMGEN_OBJECT_DESCRIPTION to COMGEN_OBJECT_FRIENDLYNAME
+ Generate DemoServerImpl.template.cpp with an empty implementation body. Project DemoServerImpl should point to the template. User must rename the template to an actual file (like DemoServerImpl.cpp to prevent overwrites by the plugin)
+ Delete ifileio interface.
+ Implement auto fill for component
+ Remove IUnknown GUID (00020424-0000-0000-C000-000000000046) from protobuf options. This must be hardcoded.
+ When input message is empty, do not declare the message in the function.
+ Modify function declaration to prevent calling the Copy Constructor on Response objects: convert between "virtual testdemo::HelloResponse Hello(const testdemo::HelloRequest & inputMessage);" to "virtual void Hello(const testdemo::HelloRequest & requestMessage, testdemo::HelloResponse & responseMessage);"
+ Move DemoServerRegistry code (most of it) to DemoProtoLib
+ Test COM server from C# application
+ Implement DemoServer GetSequentialNumber() and Hello() using a template available in DemoProtoLib. like implementMessage<testdemo::HelloRequest, testdemo::HelloResponse>. WONT DO: Unable to templatizize method GetSequentialNumber().
+ Test compilation at warning level 4. WONT DO: Way too much errors about protobuf errors.
+ Implement DemoClient using private implementation pattern: DemoClient which predeclare DemoClientImpl*. WONT DO: error C2787: 'testdemo::IDemoServer' : no GUID has been associated with this object
+ Implement isAvailable() on Client. This is to prevent message box call on errors.
+ Clear up registry code using the following sources:
  http://www.flipcode.com/archives/COM_Tutorial_Code.shtml
  https://github.com/xavierleroy/camlidl/blob/master/runtime/registry.cpp
+ Test data corruption handling. Test returned error message description.
  + Test malformed object in ServerImpl.
  + Test throwing an exception in ServerImpl.
+ Create an ErrorMessage message which contains any error which occured during the call to the function: virtual ErrorMessage Hello(const testdemo::HelloRequest & requestMessage, testdemo::HelloResponse & responseMessage);
+ Implement documentation on all classes:
  + ///<summary></summary>
  + ///<param name=""></param>
  + ///<returns></returns>
+ Create a static library project called FileRepository for handling all embedded files
+ Move generation code from protobuf-dcom-plugin::MyCodeGenerator.cpp to libDCOM. Create simple structures like the following:
  + struct METHOD {
  +   std::string name;
  +   std::string inputType;
  +   std::string outputType;
  + }
  + struct SERVICE {
  +   std::string name;
  +   std::vector<METHOD> methods;
  + }
  + struct PROTOFILEDESCRIPTOR {
  +   std::string filename;
  +   std::string package;
  +   std::vector<SERVICE> services;
  + }
  + to facilitate code generation.
+ Do we really need DCOMPLUGIN_INTERFACE_CLASS ? IDemo ? Yes Renamed to DCOMPLUGIN_IDL_INTERFACE_NAME
+ Do we really need DCOMPLUGIN_IUNKNOWN_GUID ?
+ Do we really need DCOMPLUGIN_IUNKNOWN_HELPSTRING ?
+ Do we really need DCOMPLUGIN_IFILEIO_GUID ?
+ Do we really need DCOMPLUGIN_IFILEIO_HELPSTRING ?
+ Support single line xml tag replacement. ie: ///<DCOMPLUGIN_ALL_SERVICES_VIRTUAL_IMPL>public virtual ICounterService, public virtual ITextService///</DCOMPLUGIN_ALL_SERVICES_VIRTUAL_IMPL>
+ Generate new GUID for solution and project files ?
- Using boost::intrusive_ptr instead of CComPtr  http://logs.firebreath.org/irc_channels/1/log_files/226
+ In output projects, remove dcomplugin.bat, dcomplugin.proto, TestAdd.bat and rename TestAdd_modified.proto to TestAdd.proto
+ Test that TestAdd_modified.proto can be compiled and generates the same outputs as TestAdd.proto
+ Remove the copy of the proto file while compiling unit tests. Modify the unit test to use the originals files instead of file in $(outdir). Once done, rename TestAdd_modified.proto to TestAdd.proto.
+ Rename tests to meaningful names: 
  + TestAdd to TestCalculator & rename some fields to distinguish sample from codeproject.com post
  + Create TestBuildFull
  + Create TestBuildQuick
+ Rename Component structure names as of https://stackoverflow.com/questions/23427797/export-com-registration-information
+ Add generated projects GUIDs to the output protobuf to allows external application which depends on FooClient to keep building. Another solution would be to create projects GUIDs which are not random but function of the COM GUIDs or project's name
+ Modify test project TestVoidMessages.proto to use google's void message instead of using a local void message. WON'T DO. No such thing as google.protobuf.Empty in protobuf 2.5. Also import "google/protobuf/empty.proto"; fails.
+ Update the IDL layout according to MyAltComServer.idl (VS2010 default IDL file)
+ Create a CoInterface message with only an ID field to match other messages.
+ Move some protobuf file options (like service guid) to service options. WON'T DO. Having multiple location where to set properties may confuse the user.

+ Make registration of the DemoServer application automatic on succesfull build ? - WON'T DO. Requires priviledges elevation for VS2010 or the registration always fails.
+ Add DemoTest project to the name of the generated files.
+ Rename interfaces inside DemoClient based on service names: ICouterService.h instead of IDemo.h
+ ClientDemo: do something Client.h and IDemo.h. We may not need an interface. Depends on the choosen solution for server actual implementation.
  + Move interfaces ICounterService.h and ITextService.h to DemoProtoLib.
+ DemoServer: Detach the actual implementation of the server from COM-related functions like QueryInterface() and LoadTypeInfo(). Possible options are:
  + Load a DLL plugin which implements the functions. Might have difficulties with namespaces. Stub might also have a dependency on DemoProtoLib.
  + Predeclare all functions. Call unimplemented declarations. Creates unresolved externals until someone actually implements the functions.
  + Create a static library called DemoServerImpl which is autogenerated: DemoServerImpl.vcxproj and DemoServerImpl.h with a faked DemoServerImpl.cpp which is not autogenerated by protoc.exe and must be manually created.
+ DemoServer: Add IDemo interface to project too. Define CouterServiceServer.h and CouterServiceServer.cpp - WON'T DO
+ Rename Client.cpp and Client.h to meaningful names: CouterService.h and CouterService.cpp ? - WON'T DO
+ Write a test with 2 services
+ Add a vbs test which instanciate the object and calls a method
+ Rename DemoServerImpl.cpp and .h to DemoServerStub.* to prevent confusion with the actual server implementation (not COM related). - WON'T DO
+ Create a DemoProtocolLib project which is a static library which emcapsulate all protocol buffers generated files. This prevents compiling the same files in 3 different projects.
+ Rename project file names to match the displayed name in the solution explorer DemoServer.vcxproj, etc...
+ Make DemoProtoLib a DLL instead of a static library ? - WON'T DO
+ Change field cointerface from Identifier to CoInterface message which contains a field Identifier named id to match other message structure.
