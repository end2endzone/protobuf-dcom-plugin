// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcomplugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcomplugin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcomplugin {

namespace {

const ::google::protobuf::Descriptor* Identifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Identifier_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypeLib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeLib_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcomplugin_2eproto() {
  protobuf_AddDesc_dcomplugin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcomplugin.proto");
  GOOGLE_CHECK(file != NULL);
  Identifier_descriptor_ = file->message_type(0);
  static const int Identifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, helpstring_),
  };
  Identifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Identifier_descriptor_,
      Identifier::default_instance_,
      Identifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Identifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Identifier));
  CoClass_descriptor_ = file->message_type(1);
  static const int CoClass_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoClass, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoClass, friendlyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoClass, id_),
  };
  CoClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoClass_descriptor_,
      CoClass::default_instance_,
      CoClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoClass));
  CoInterface_descriptor_ = file->message_type(2);
  static const int CoInterface_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoInterface, id_),
  };
  CoInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoInterface_descriptor_,
      CoInterface::default_instance_,
      CoInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoInterface));
  TypeLib_descriptor_ = file->message_type(3);
  static const int TypeLib_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeLib, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeLib, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeLib, cointerface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeLib, coclass_),
  };
  TypeLib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeLib_descriptor_,
      TypeLib::default_instance_,
      TypeLib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeLib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeLib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeLib));
  Component_descriptor_ = file->message_type(4);
  static const int Component_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, typelib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, appid_),
  };
  Component_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Component));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcomplugin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Identifier_descriptor_, &Identifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoClass_descriptor_, &CoClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoInterface_descriptor_, &CoInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeLib_descriptor_, &TypeLib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Component_descriptor_, &Component::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcomplugin_2eproto() {
  delete Identifier::default_instance_;
  delete Identifier_reflection_;
  delete CoClass::default_instance_;
  delete CoClass_reflection_;
  delete CoInterface::default_instance_;
  delete CoInterface_reflection_;
  delete TypeLib::default_instance_;
  delete TypeLib_reflection_;
  delete Component::default_instance_;
  delete Component_reflection_;
}

void protobuf_AddDesc_dcomplugin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020dcomplugin.proto\022\ndcomplugin\032 google/p"
    "rotobuf/descriptor.proto\".\n\nIdentifier\022\014"
    "\n\004guid\030\001 \001(\t\022\022\n\nhelpstring\030\002 \001(\t\"Q\n\007CoCl"
    "ass\022\014\n\004name\030\001 \001(\t\022\024\n\014friendlyname\030\002 \001(\t\022"
    "\"\n\002id\030\003 \001(\0132\026.dcomplugin.Identifier\"1\n\013C"
    "oInterface\022\"\n\002id\030\003 \001(\0132\026.dcomplugin.Iden"
    "tifier\"\217\001\n\007TypeLib\022\014\n\004name\030\001 \001(\t\022\"\n\002id\030\002"
    " \001(\0132\026.dcomplugin.Identifier\022,\n\013cointerf"
    "ace\030\003 \001(\0132\027.dcomplugin.CoInterface\022$\n\007co"
    "class\030\004 \001(\0132\023.dcomplugin.CoClass\"f\n\tComp"
    "onent\022\014\n\004name\030\001 \001(\t\022$\n\007typelib\030\002 \001(\0132\023.d"
    "complugin.TypeLib\022%\n\005appid\030\003 \001(\0132\026.dcomp"
    "lugin.Identifier:H\n\tcomponent\022\034.google.p"
    "rotobuf.FileOptions\030\320\206\003 \001(\0132\025.dcomplugin"
    ".Component", 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcomplugin.proto", &protobuf_RegisterTypes);
  Identifier::default_instance_ = new Identifier();
  CoClass::default_instance_ = new CoClass();
  CoInterface::default_instance_ = new CoInterface();
  TypeLib::default_instance_ = new TypeLib();
  Component::default_instance_ = new Component();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::FileOptions::default_instance(),
    50000, 11, false, false,
    &::dcomplugin::Component::default_instance());
  Identifier::default_instance_->InitAsDefaultInstance();
  CoClass::default_instance_->InitAsDefaultInstance();
  CoInterface::default_instance_->InitAsDefaultInstance();
  TypeLib::default_instance_->InitAsDefaultInstance();
  Component::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcomplugin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcomplugin_2eproto {
  StaticDescriptorInitializer_dcomplugin_2eproto() {
    protobuf_AddDesc_dcomplugin_2eproto();
  }
} static_descriptor_initializer_dcomplugin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Identifier::kGuidFieldNumber;
const int Identifier::kHelpstringFieldNumber;
#endif  // !_MSC_VER

Identifier::Identifier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Identifier::InitAsDefaultInstance() {
}

Identifier::Identifier(const Identifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Identifier::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  helpstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Identifier::~Identifier() {
  SharedDtor();
}

void Identifier::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (helpstring_ != &::google::protobuf::internal::kEmptyString) {
    delete helpstring_;
  }
  if (this != default_instance_) {
  }
}

void Identifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Identifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Identifier_descriptor_;
}

const Identifier& Identifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcomplugin_2eproto();
  return *default_instance_;
}

Identifier* Identifier::default_instance_ = NULL;

Identifier* Identifier::New() const {
  return new Identifier;
}

void Identifier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    if (has_helpstring()) {
      if (helpstring_ != &::google::protobuf::internal::kEmptyString) {
        helpstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Identifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_helpstring;
        break;
      }

      // optional string helpstring = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_helpstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->helpstring().data(), this->helpstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Identifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guid(), output);
  }

  // optional string helpstring = 2;
  if (has_helpstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->helpstring().data(), this->helpstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->helpstring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Identifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional string helpstring = 2;
  if (has_helpstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->helpstring().data(), this->helpstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->helpstring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Identifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string helpstring = 2;
    if (has_helpstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->helpstring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Identifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Identifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Identifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Identifier::MergeFrom(const Identifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_helpstring()) {
      set_helpstring(from.helpstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Identifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identifier::CopyFrom(const Identifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identifier::IsInitialized() const {

  return true;
}

void Identifier::Swap(Identifier* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(helpstring_, other->helpstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Identifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Identifier_descriptor_;
  metadata.reflection = Identifier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoClass::kNameFieldNumber;
const int CoClass::kFriendlynameFieldNumber;
const int CoClass::kIdFieldNumber;
#endif  // !_MSC_VER

CoClass::CoClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoClass::InitAsDefaultInstance() {
  id_ = const_cast< ::dcomplugin::Identifier*>(&::dcomplugin::Identifier::default_instance());
}

CoClass::CoClass(const CoClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoClass::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendlyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoClass::~CoClass() {
  SharedDtor();
}

void CoClass::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (friendlyname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendlyname_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void CoClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoClass_descriptor_;
}

const CoClass& CoClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcomplugin_2eproto();
  return *default_instance_;
}

CoClass* CoClass::default_instance_ = NULL;

CoClass* CoClass::New() const {
  return new CoClass;
}

void CoClass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_friendlyname()) {
      if (friendlyname_ != &::google::protobuf::internal::kEmptyString) {
        friendlyname_->clear();
      }
    }
    if (has_id()) {
      if (id_ != NULL) id_->::dcomplugin::Identifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendlyname;
        break;
      }

      // optional string friendlyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendlyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendlyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendlyname().data(), this->friendlyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional .dcomplugin.Identifier id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string friendlyname = 2;
  if (has_friendlyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendlyname().data(), this->friendlyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendlyname(), output);
  }

  // optional .dcomplugin.Identifier id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string friendlyname = 2;
  if (has_friendlyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendlyname().data(), this->friendlyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendlyname(), target);
  }

  // optional .dcomplugin.Identifier id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoClass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string friendlyname = 2;
    if (has_friendlyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendlyname());
    }

    // optional .dcomplugin.Identifier id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoClass::MergeFrom(const CoClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_friendlyname()) {
      set_friendlyname(from.friendlyname());
    }
    if (from.has_id()) {
      mutable_id()->::dcomplugin::Identifier::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoClass::CopyFrom(const CoClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoClass::IsInitialized() const {

  return true;
}

void CoClass::Swap(CoClass* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(friendlyname_, other->friendlyname_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoClass_descriptor_;
  metadata.reflection = CoClass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoInterface::kIdFieldNumber;
#endif  // !_MSC_VER

CoInterface::CoInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoInterface::InitAsDefaultInstance() {
  id_ = const_cast< ::dcomplugin::Identifier*>(&::dcomplugin::Identifier::default_instance());
}

CoInterface::CoInterface(const CoInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoInterface::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoInterface::~CoInterface() {
  SharedDtor();
}

void CoInterface::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void CoInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoInterface_descriptor_;
}

const CoInterface& CoInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcomplugin_2eproto();
  return *default_instance_;
}

CoInterface* CoInterface::default_instance_ = NULL;

CoInterface* CoInterface::New() const {
  return new CoInterface;
}

void CoInterface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::dcomplugin::Identifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcomplugin.Identifier id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dcomplugin.Identifier id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dcomplugin.Identifier id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoInterface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dcomplugin.Identifier id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoInterface::MergeFrom(const CoInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::dcomplugin::Identifier::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoInterface::CopyFrom(const CoInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoInterface::IsInitialized() const {

  return true;
}

void CoInterface::Swap(CoInterface* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoInterface_descriptor_;
  metadata.reflection = CoInterface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TypeLib::kNameFieldNumber;
const int TypeLib::kIdFieldNumber;
const int TypeLib::kCointerfaceFieldNumber;
const int TypeLib::kCoclassFieldNumber;
#endif  // !_MSC_VER

TypeLib::TypeLib()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TypeLib::InitAsDefaultInstance() {
  id_ = const_cast< ::dcomplugin::Identifier*>(&::dcomplugin::Identifier::default_instance());
  cointerface_ = const_cast< ::dcomplugin::CoInterface*>(&::dcomplugin::CoInterface::default_instance());
  coclass_ = const_cast< ::dcomplugin::CoClass*>(&::dcomplugin::CoClass::default_instance());
}

TypeLib::TypeLib(const TypeLib& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TypeLib::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = NULL;
  cointerface_ = NULL;
  coclass_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeLib::~TypeLib() {
  SharedDtor();
}

void TypeLib::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete id_;
    delete cointerface_;
    delete coclass_;
  }
}

void TypeLib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeLib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeLib_descriptor_;
}

const TypeLib& TypeLib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcomplugin_2eproto();
  return *default_instance_;
}

TypeLib* TypeLib::default_instance_ = NULL;

TypeLib* TypeLib::New() const {
  return new TypeLib;
}

void TypeLib::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_id()) {
      if (id_ != NULL) id_->::dcomplugin::Identifier::Clear();
    }
    if (has_cointerface()) {
      if (cointerface_ != NULL) cointerface_->::dcomplugin::CoInterface::Clear();
    }
    if (has_coclass()) {
      if (coclass_ != NULL) coclass_->::dcomplugin::CoClass::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeLib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .dcomplugin.Identifier id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cointerface;
        break;
      }

      // optional .dcomplugin.CoInterface cointerface = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cointerface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cointerface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_coclass;
        break;
      }

      // optional .dcomplugin.CoClass coclass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coclass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coclass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TypeLib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .dcomplugin.Identifier id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id(), output);
  }

  // optional .dcomplugin.CoInterface cointerface = 3;
  if (has_cointerface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cointerface(), output);
  }

  // optional .dcomplugin.CoClass coclass = 4;
  if (has_coclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->coclass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TypeLib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dcomplugin.Identifier id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id(), target);
  }

  // optional .dcomplugin.CoInterface cointerface = 3;
  if (has_cointerface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cointerface(), target);
  }

  // optional .dcomplugin.CoClass coclass = 4;
  if (has_coclass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->coclass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TypeLib::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dcomplugin.Identifier id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .dcomplugin.CoInterface cointerface = 3;
    if (has_cointerface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cointerface());
    }

    // optional .dcomplugin.CoClass coclass = 4;
    if (has_coclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coclass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeLib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeLib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeLib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeLib::MergeFrom(const TypeLib& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      mutable_id()->::dcomplugin::Identifier::MergeFrom(from.id());
    }
    if (from.has_cointerface()) {
      mutable_cointerface()->::dcomplugin::CoInterface::MergeFrom(from.cointerface());
    }
    if (from.has_coclass()) {
      mutable_coclass()->::dcomplugin::CoClass::MergeFrom(from.coclass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeLib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeLib::CopyFrom(const TypeLib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeLib::IsInitialized() const {

  return true;
}

void TypeLib::Swap(TypeLib* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(cointerface_, other->cointerface_);
    std::swap(coclass_, other->coclass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeLib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeLib_descriptor_;
  metadata.reflection = TypeLib_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Component::kNameFieldNumber;
const int Component::kTypelibFieldNumber;
const int Component::kAppidFieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Component::InitAsDefaultInstance() {
  typelib_ = const_cast< ::dcomplugin::TypeLib*>(&::dcomplugin::TypeLib::default_instance());
  appid_ = const_cast< ::dcomplugin::Identifier*>(&::dcomplugin::Identifier::default_instance());
}

Component::Component(const Component& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Component::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typelib_ = NULL;
  appid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component::~Component() {
  SharedDtor();
}

void Component::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete typelib_;
    delete appid_;
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcomplugin_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New() const {
  return new Component;
}

void Component::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_typelib()) {
      if (typelib_ != NULL) typelib_->::dcomplugin::TypeLib::Clear();
    }
    if (has_appid()) {
      if (appid_ != NULL) appid_->::dcomplugin::Identifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_typelib;
        break;
      }

      // optional .dcomplugin.TypeLib typelib = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typelib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_typelib()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // optional .dcomplugin.Identifier appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .dcomplugin.TypeLib typelib = 2;
  if (has_typelib()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->typelib(), output);
  }

  // optional .dcomplugin.Identifier appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dcomplugin.TypeLib typelib = 2;
  if (has_typelib()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->typelib(), target);
  }

  // optional .dcomplugin.Identifier appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dcomplugin.TypeLib typelib = 2;
    if (has_typelib()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->typelib());
    }

    // optional .dcomplugin.Identifier appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Component* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Component*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_typelib()) {
      mutable_typelib()->::dcomplugin::TypeLib::MergeFrom(from.typelib());
    }
    if (from.has_appid()) {
      mutable_appid()->::dcomplugin::Identifier::MergeFrom(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {

  return true;
}

void Component::Swap(Component* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(typelib_, other->typelib_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::dcomplugin::Component >, 11, false >
  component(kComponentFieldNumber, ::dcomplugin::Component::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace dcomplugin

// @@protoc_insertion_point(global_scope)
