/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileSolution.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class SolutionFile : public virtual bin2cpp::File
  {
  public:
    SolutionFile() {}
    ~SolutionFile() {}
    virtual size_t getSize() { return 2619; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 14; }
    virtual const char * getFilename() { return "DCOMPLUGIN_COMPONENT_NAME.sln"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      buffer = "Microsoft Visual Studio Solution File, Format Version 11.00\x0d\012# Visual C++ Express 2010\x0d\012Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEClient\", \"DCOMPLUGIN_COMPONENT_NAM"; if (iIndex == index) return buffer; index++;
      buffer = "EClient.vcxproj\", \"{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}\"\x0d\012EndProject\x0d\012Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEServer\", \"DCOMPLUGIN_COMPONENT_NAMEServer.vcxproj\""; if (iIndex == index) return buffer; index++;
      buffer = ", \"{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}\"\x0d\012EndProject\x0d\012Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEProtoLib\", \"DCOMPLUGIN_COMPONENT_NAMEProtoLib.vcxproj\", \"{DCOMPLUG"; if (iIndex == index) return buffer; index++;
      buffer = "IN_PROTOLIB_PROJECT_GUID_UPPER}\"\x0d\012EndProject\x0d\012Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEServerImpl\", \"DCOMPLUGIN_COMPONENT_NAMEServerImpl.vcxproj\", \"{DCOMPLUGIN_SER"; if (iIndex == index) return buffer; index++;
      buffer = "VER_IMPL_PROJECT_GUID_UPPER}\"\x0d\012EndProject\x0d\012Global\x0d\x0a\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\x0d\x0a\t\tDebug|Win32 = Debug|Win32\x0d\x0a\t\tRelease|Win32 = Release|Win32\x0d\x0a\tEndGlobalSection\x0d\x0a\tGloba"; if (iIndex == index) return buffer; index++;
      buffer = "lSection(ProjectConfigurationPlatforms) = postSolution\x0d\x0a\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\x0d\x0a\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Debug|Win32.Build.0 = Deb"; if (iIndex == index) return buffer; index++;
      buffer = "ug|Win32\x0d\x0a\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release|Win32\x0d\x0a\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Release|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_PROJECT"; if (iIndex == index) return buffer; index++;
      buffer = "_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}.Debug|Win32.Build.0 = Debug|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release"; if (iIndex == index) return buffer; index++;
      buffer = "|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Release|Win32\x0d\x0a\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\x0d\x0a\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_G"; if (iIndex == index) return buffer; index++;
      buffer = "UID_UPPER}.Debug|Win32.Build.0 = Debug|Win32\x0d\x0a\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release|Win32\x0d\x0a\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Rel"; if (iIndex == index) return buffer; index++;
      buffer = "ease|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_IMPL_PROJECT_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_IMPL_PROJECT_GUID_UPPER}.Debug|Win32.Build.0 = Debug|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_IMP"; if (iIndex == index) return buffer; index++;
      buffer = "L_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release|Win32\x0d\x0a\t\t{DCOMPLUGIN_SERVER_IMPL_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Release|Win32\x0d\x0a\tEndGlobalSection\x0d\x0a\tGlobalSection(SolutionProperties"; if (iIndex == index) return buffer; index++;
      buffer = ") = preSolution\x0d\x0a\t\tHideSolutionNode = FALSE\x0d\x0a\tEndGlobalSection\x0d\x0a\tGlobalSection(DPCodeReviewSolutionGUID) = preSolution\x0d\x0a\t\tDPCodeReviewSolutionGUID = {00000000-0000-0000-0000-000000000000}\x0d\x0a\tEndGlobalS"; if (iIndex == index) return buffer; index++;
      oLength = 19;
      buffer = "ection\x0d\012EndGlobal\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "b5c02de779cc7b7544a8481e24d858aa"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getSolutionFile() { static SolutionFile _instance; return _instance; }
}; //bin2cpp
