/**
 * This file was generated by bin2cpp v2.2.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'DCOMPLUGIN_COMPONENT_NAME.sln', last modified 1552247129.
 * Do not modify this file.
 */
#include "EmbeddedFileSolution.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class SolutionFile : public virtual bin2cpp::File
  {
  public:
    SolutionFile() { build(); }
    virtual ~SolutionFile() {}
    virtual size_t getSize() const { return 2619; }
    virtual const char * getFilename() const { return "DCOMPLUGIN_COMPONENT_NAME.sln"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("Microsoft Visual Studio Solution File, Format Version 11.00\r\n# Visual C++ Express 2010\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEClient\", \"DCOMPLUGIN_COMPONENT_NAM", 200);
      mBuffer.append("EClient.vcxproj\", \"{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEServer\", \"DCOMPLUGIN_COMPONENT_NAMEServer.vcxproj\"", 200);
      mBuffer.append(", \"{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEProtoLib\", \"DCOMPLUGIN_COMPONENT_NAMEProtoLib.vcxproj\", \"{DCOMPLUG", 200);
      mBuffer.append("IN_PROTOLIB_PROJECT_GUID_UPPER}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"DCOMPLUGIN_COMPONENT_NAMEServerImpl\", \"DCOMPLUGIN_COMPONENT_NAMEServerImpl.vcxproj\", \"{DCOMPLUGIN_SER", 200);
      mBuffer.append("VER_IMPL_PROJECT_GUID_UPPER}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Win32 = Debug|Win32\r\n\t\tRelease|Win32 = Release|Win32\r\n\tEndGlobalSection\r\n\tGloba", 200);
      mBuffer.append("lSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Debug|Win32.Build.0 = Deb", 200);
      mBuffer.append("ug|Win32\r\n\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{DCOMPLUGIN_CLIENT_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{DCOMPLUGIN_SERVER_PROJECT", 200);
      mBuffer.append("_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release", 200);
      mBuffer.append("|Win32\r\n\t\t{DCOMPLUGIN_SERVER_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_G", 200);
      mBuffer.append("UID_UPPER}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{DCOMPLUGIN_PROTOLIB_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Rel", 200);
      mBuffer.append("ease|Win32\r\n\t\t{DCOMPLUGIN_SERVER_IMPL_PROJECT_GUID_UPPER}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{DCOMPLUGIN_SERVER_IMPL_PROJECT_GUID_UPPER}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{DCOMPLUGIN_SERVER_IMP", 200);
      mBuffer.append("L_PROJECT_GUID_UPPER}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{DCOMPLUGIN_SERVER_IMPL_PROJECT_GUID_UPPER}.Release|Win32.Build.0 = Release|Win32\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties", 200);
      mBuffer.append(") = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(DPCodeReviewSolutionGUID) = preSolution\r\n\t\tDPCodeReviewSolutionGUID = {00000000-0000-0000-0000-000000000000}\r\n\tEndGlobalS", 200);
      mBuffer.append("ection\r\nEndGlobal\r\n", 19);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getSolutionFile() { static SolutionFile _instance; return _instance; }
}; //bin2cpp
