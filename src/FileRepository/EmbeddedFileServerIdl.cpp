/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileServerIdl.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class ServerIdlFile : public virtual bin2cpp::File
  {
  public:
    ServerIdlFile() {}
    ~ServerIdlFile() {}
    virtual size_t getSize() { return 942; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 5; }
    virtual const char * getFilename() { return "DCOMPLUGIN_COMPONENT_NAMEServer.idl"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      buffer = "// DCOMPLUGIN_COMPONENT_NAMEServer.idl : IDL source for DCOMPLUGIN_COMPONENT_NAMEServer\x0d\012//\x0d\x0a\x0d\012// This file will be processed by the MIDL tool to\x0d\012// produce the type library (DCOMPLUGIN_COMPONENT_NAM"; if (iIndex == index) return buffer; index++;
      buffer = "EServer.tlb) and marshalling code.\x0d\x0a\x0d\012import \"oaidl.idl\";\x0d\012import \"ocidl.idl\";\x0d\x0a\x0d\012[\x0d\012  object,\x0d\012  uuid(DCOMPLUGIN_IDL_INTERFACE_GUID),\x0d\x0a\tdual,\x0d\x0a\tnonextensible,\x0d\012  helpstring(\"DCOMPLUGIN_IDL_INTERFACE_"; if (iIndex == index) return buffer; index++;
      buffer = "HELPSTRING\"),\x0d\012  dual,\x0d\x0a\tpointer_default(unique)\x0d\012]\x0d\012interface DCOMPLUGIN_IDL_INTERFACE_NAMEServer : IDispatch\x0d\012{\x0d\012DCOMPLUGIN_IDL_SERVICES_DECLARATION\x0d\012};\x0d\012[\x0d\012  uuid(DCOMPLUGIN_LIBRARY_GUID),\x0d\012  versi"; if (iIndex == index) return buffer; index++;
      buffer = "on(1.0),\x0d\012  helpstring(\"DCOMPLUGIN_LIBRARY_HELPSTRING\")\x0d\012]\x0d\012library DCOMPLUGIN_LIBRARY_NAME\x0d\012{\x0d\x0a\timportlib(\"stdole2.tlb\");\x0d\012  [\x0d\012    uuid(DCOMPLUGIN_COCLASS_GUID),\x0d\012    helpstring(\"DCOMPLUGIN_COCLASS_"; if (iIndex == index) return buffer; index++;
      oLength = 142;
      buffer = "HELPSTRING\") \x0d\012  ]\x0d\012  coclass CoDCOMPLUGIN_COMPONENT_NAMEServer\x0d\012  {\x0d\012    [default] interface DCOMPLUGIN_IDL_INTERFACE_NAMEServer;\x0d\012  };\x0d\012};\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "044d974a92fbbb3380c8a255d055ada6"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getServerIdlFile() { static ServerIdlFile _instance; return _instance; }
}; //bin2cpp
