/**
 * This file was generated by bin2cpp v2.2.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'DCOMPLUGIN_COMPONENT_NAMEServer.idl', last modified 1552228002.
 * Do not modify this file.
 */
#include "EmbeddedFileServerIdl.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class ServerIdlFile : public virtual bin2cpp::File
  {
  public:
    ServerIdlFile() { build(); }
    virtual ~ServerIdlFile() {}
    virtual size_t getSize() const { return 942; }
    virtual const char * getFilename() const { return "DCOMPLUGIN_COMPONENT_NAMEServer.idl"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("// DCOMPLUGIN_COMPONENT_NAMEServer.idl : IDL source for DCOMPLUGIN_COMPONENT_NAMEServer\r\n//\r\n\r\n// This file will be processed by the MIDL tool to\r\n// produce the type library (DCOMPLUGIN_COMPONENT_NAM", 200);
      mBuffer.append("EServer.tlb) and marshalling code.\r\n\r\nimport \"oaidl.idl\";\r\nimport \"ocidl.idl\";\r\n\r\n[\r\n  object,\r\n  uuid(DCOMPLUGIN_IDL_INTERFACE_GUID),\r\n\tdual,\r\n\tnonextensible,\r\n  helpstring(\"DCOMPLUGIN_IDL_INTERFACE_", 200);
      mBuffer.append("HELPSTRING\"),\r\n  dual,\r\n\tpointer_default(unique)\r\n]\r\ninterface DCOMPLUGIN_IDL_INTERFACE_NAMEServer : IDispatch\r\n{\r\nDCOMPLUGIN_IDL_SERVICES_DECLARATION\r\n};\r\n[\r\n  uuid(DCOMPLUGIN_LIBRARY_GUID),\r\n  versi", 200);
      mBuffer.append("on(1.0),\r\n  helpstring(\"DCOMPLUGIN_LIBRARY_HELPSTRING\")\r\n]\r\nlibrary DCOMPLUGIN_LIBRARY_NAME\r\n{\r\n\timportlib(\"stdole2.tlb\");\r\n  [\r\n    uuid(DCOMPLUGIN_COCLASS_GUID),\r\n    helpstring(\"DCOMPLUGIN_COCLASS_", 200);
      mBuffer.append("HELPSTRING\") \r\n  ]\r\n  coclass CoDCOMPLUGIN_COMPONENT_NAMEServer\r\n  {\r\n    [default] interface DCOMPLUGIN_IDL_INTERFACE_NAMEServer;\r\n  };\r\n};\r\n", 142);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getServerIdlFile() { static ServerIdlFile _instance; return _instance; }
}; //bin2cpp
