/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileClientCpp.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class ClientCppFile : public virtual bin2cpp::File
  {
  public:
    ClientCppFile() {}
    ~ClientCppFile() {}
    virtual size_t getSize() { return 2219; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 12; }
    virtual const char * getFilename() { return "DCOMPLUGIN_COMPONENT_NAMEClient.cpp"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      buffer = "#define WIN32_LEAN_AND_MEAN    // Exclude rarely-used stuff from Windows headers\x0d\012#include <windows.h>\x0d\x0a\x0d\012#include \"DCOMPLUGIN_COMPONENT_NAMEClient.h\"\x0d\x0a\x0d\012#include <comdef.h> //for CoInitialize and CoU"; if (iIndex == index) return buffer; index++;
      buffer = "ninitialize\x0d\012#include \"DCOMPLUGIN_COMPONENT_NAMEServer_h.h\" // interface declaration\x0d\012#include \"DCOMPLUGIN_COMPONENT_NAMEServer_i.c\" // IID, CLSID\x0d\x0a\x0d\012#include \"MessageSerializer.h\"\x0d\012#include \"ErrorHan"; if (iIndex == index) return buffer; index++;
      buffer = "dlers.h\"\x0d\x0a\x0d\012namespace DCOMPLUGIN_PACKAGE_NAME {\x0d\x0a\x0d\012#define mServer ((DCOMPLUGIN_IDL_INTERFACE_NAMEServer *)mInstance)\x0d\x0a\x0d\012BOOL APIENTRY DllMain( HANDLE hModule,\x0d\012                      DWORD  ul_reason_"; if (iIndex == index) return buffer; index++;
      buffer = "for_call,\x0d\012                      LPVOID lpReserved\x0d\012                      )\x0d\012{\x0d\012  switch (ul_reason_for_call)\x0d\012  {\x0d\012  case DLL_PROCESS_ATTACH:\x0d\012  case DLL_THREAD_ATTACH:\x0d\012  case DLL_THREAD_DETACH:\x0d\012  "; if (iIndex == index) return buffer; index++;
      buffer = "case DLL_PROCESS_DETACH:\x0d\012    break;\x0d\012  }\x0d\012  return TRUE;\x0d\012}\x0d\x0a\x0d\012DCOMPLUGIN_COMPONENT_NAMEClient::DCOMPLUGIN_COMPONENT_NAMEClient() :\x0d\012  mInstance(NULL),\x0d\012  mLastError(0)\x0d\012{\x0d\012  //note: multiple calls t"; if (iIndex == index) return buffer; index++;
      buffer = "o CoInitialize() is safe.\x0d\012  //An internal counter is used to actually initialize on first call only.\x0d\012  ::CoInitialize(NULL);\x0d\x0a\x0d\012  // create an instance\x0d\012  HRESULT hr = CoCreateInstance(CLSID_CoDCOMP"; if (iIndex == index) return buffer; index++;
      buffer = "LUGIN_COMPONENT_NAMEServer, NULL, /*CLSCTX_ALL*/ CLSCTX_SERVER, /*IID_DCOMPLUGIN_IDL_INTERFACE_NAMEServer*/ __uuidof(DCOMPLUGIN_IDL_INTERFACE_NAMEServer), (void **)&mInstance);\x0d\012  if (FAILED(hr))\x0d\012  {"; if (iIndex == index) return buffer; index++;
      buffer = "\x0d\012    mLastError = hr;\x0d\012  }\x0d\012}\x0d\x0a\x0d\012DCOMPLUGIN_COMPONENT_NAMEClient::~DCOMPLUGIN_COMPONENT_NAMEClient()\x0d\012{\x0d\012  if (mServer)\x0d\012  {\x0d\012    mServer->Release();\x0d\012    mInstance = NULL;\x0d\012  }\x0d\x0a\x0d\012  //note: the numb"; if (iIndex == index) return buffer; index++;
      buffer = "er of calls to CoUninitialize() must match the number of calls to CoInitialize(NULL)\x0d\012  ::CoUninitialize();\x0d\012}\x0d\x0a\x0d\012bool DCOMPLUGIN_COMPONENT_NAMEClient::isConnected()\x0d\012{\x0d\012  if (mServer)\x0d\012  {\x0d\012    retur"; if (iIndex == index) return buffer; index++;
      buffer = "n true;\x0d\012  }\x0d\012  return false;\x0d\012}\x0d\x0a\x0d\012//DCOMPLUGIN_COMPONENT_NAMEProtoLib interfaces\x0d\012unsigned int DCOMPLUGIN_COMPONENT_NAMEClient::GetLastComErrorCode()\x0d\012{\x0d\012  return mLastError;\x0d\012}\x0d\x0a\x0d\012std::string DCOMP"; if (iIndex == index) return buffer; index++;
      buffer = "LUGIN_COMPONENT_NAMEClient::GetLastComErrorStr()\x0d\012{\x0d\012  std::string description = GetComErrorDescription(mLastError);\x0d\012  return description;\x0d\012}\x0d\x0a\x0d\012DCOMPLUGIN_CLIENT_DEFINITION\x0d\x0a\x0d\012}  // namespace DCOMPL"; if (iIndex == index) return buffer; index++;
      oLength = 19;
      buffer = "UGIN_PACKAGE_NAME\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "42d2bbea1b7862c7896769a5fbd55609"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getClientCppFile() { static ClientCppFile _instance; return _instance; }
}; //bin2cpp
