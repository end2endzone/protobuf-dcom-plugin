/**
 * This file was generated by bin2cpp v2.2.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'Registry.h', last modified 1552228003.
 * Do not modify this file.
 */
#include "EmbeddedFileRegistryHeader.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class RegistryHeaderFile : public virtual bin2cpp::File
  {
  public:
    RegistryHeaderFile() { build(); }
    virtual ~RegistryHeaderFile() {}
    virtual size_t getSize() const { return 2179; }
    virtual const char * getFilename() const { return "Registry.h"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("\r\n#pragma once\r\n\r\n//\r\n// Registry.h\r\n//   - Helper functions registering and unregistering a component.\r\n//\r\n\r\n// This function will register a component in the Registry.\r\n// The component calls this ", 200);
      mBuffer.append("function from its DllRegisterServer function.\r\nHRESULT RegisterServer(HMODULE hModule,\r\n                       const CLSID& clsid,\r\n                       const char* szFriendlyName,\r\n                ", 200);
      mBuffer.append("       const char* szVerIndProgID,\r\n                       const char* szProgID,\r\n\t\t\t\t\t             const CLSID& libid);\r\n\r\n// This function will register a component in the Registry.\r\n// The componen", 200);
      mBuffer.append("t calls this function from its DllRegisterServer function.\r\nHRESULT RegisterServer(HMODULE hModule,\r\n                       const char* szAppID,\r\n                       const CLSID& clsid,\r\n          ", 200);
      mBuffer.append("             const char* szFriendlyName,\r\n                       const char* szVerIndProgID,\r\n                       const char* szProgID,\r\n\t\t\t\t\t             const CLSID& libid) ;\r\n\r\n// This function ", 200);
      mBuffer.append("will unregister a component.  Components\r\n// call this function from their DllUnregisterServer function.\r\nHRESULT UnregisterServer(const CLSID& clsid,\r\n                         const char* szVerIndPro", 200);
      mBuffer.append("gID,\r\n                         const char* szProgID,\r\n\t\t\t\t\t\t             const CLSID& libid);\r\n\r\n// This function will unregister a component.  Components\r\n// call this function from their DllUnregist", 200);
      mBuffer.append("erServer function.\r\nHRESULT UnregisterServer(HMODULE hModule,\r\n                         const char* szAppID,\r\n                         const CLSID& clsid,\r\n                         const char* szVerIn", 200);
      mBuffer.append("dProgID,\r\n                         const char* szProgID,\r\n\t\t\t\t\t\t             const CLSID& libid);\r\n\r\n\r\nvoid RegisterInterface(HMODULE hModule,            // DLL module handle\r\n                       c", 200);
      mBuffer.append("onst CLSID& clsid,         // Class ID\r\n                       const char* szFriendlyName, // Friendly Name\r\n\t\t\t\t\t             const CLSID &libid,\r\n\t\t\t\t\t             const IID &iid);\r\n\r\nvoid Unregiste", 200);
      mBuffer.append("rInterface(const IID &iid);\r\n\r\n\r\nHRESULT RegisterTypeLib(HINSTANCE hInstTypeLib, LPCOLESTR lpszIndex);\r\nHRESULT UnRegisterTypeLib(HINSTANCE hInstTypeLib, LPCOLESTR lpszIndex);\r\n\r\n", 179);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getRegistryHeaderFile() { static RegistryHeaderFile _instance; return _instance; }
}; //bin2cpp
