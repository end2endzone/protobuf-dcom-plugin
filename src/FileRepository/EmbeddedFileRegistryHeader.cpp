/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileRegistryHeader.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class RegistryHeaderFile : public virtual bin2cpp::File
  {
  public:
    RegistryHeaderFile() {}
    ~RegistryHeaderFile() {}
    virtual size_t getSize() { return 2179; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 11; }
    virtual const char * getFilename() { return "Registry.h"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      buffer = "\x0d\012#pragma once\x0d\x0a\x0d\012//\x0d\012// Registry.h\x0d\012//   - Helper functions registering and unregistering a component.\x0d\012//\x0d\x0a\x0d\012// This function will register a component in the Registry.\x0d\012// The component calls this "; if (iIndex == index) return buffer; index++;
      buffer = "function from its DllRegisterServer function.\x0d\012HRESULT RegisterServer(HMODULE hModule,\x0d\012                       const CLSID& clsid,\x0d\012                       const char* szFriendlyName,\x0d\012                "; if (iIndex == index) return buffer; index++;
      buffer = "       const char* szVerIndProgID,\x0d\012                       const char* szProgID,\x0d\x0a\t\t\t\t\t             const CLSID& libid);\x0d\x0a\x0d\012// This function will register a component in the Registry.\x0d\012// The componen"; if (iIndex == index) return buffer; index++;
      buffer = "t calls this function from its DllRegisterServer function.\x0d\012HRESULT RegisterServer(HMODULE hModule,\x0d\012                       const char* szAppID,\x0d\012                       const CLSID& clsid,\x0d\012          "; if (iIndex == index) return buffer; index++;
      buffer = "             const char* szFriendlyName,\x0d\012                       const char* szVerIndProgID,\x0d\012                       const char* szProgID,\x0d\x0a\t\t\t\t\t             const CLSID& libid) ;\x0d\x0a\x0d\012// This function "; if (iIndex == index) return buffer; index++;
      buffer = "will unregister a component.  Components\x0d\012// call this function from their DllUnregisterServer function.\x0d\012HRESULT UnregisterServer(const CLSID& clsid,\x0d\012                         const char* szVerIndPro"; if (iIndex == index) return buffer; index++;
      buffer = "gID,\x0d\012                         const char* szProgID,\x0d\x0a\t\t\t\t\t\t             const CLSID& libid);\x0d\x0a\x0d\012// This function will unregister a component.  Components\x0d\012// call this function from their DllUnregist"; if (iIndex == index) return buffer; index++;
      buffer = "erServer function.\x0d\012HRESULT UnregisterServer(HMODULE hModule,\x0d\012                         const char* szAppID,\x0d\012                         const CLSID& clsid,\x0d\012                         const char* szVerIn"; if (iIndex == index) return buffer; index++;
      buffer = "dProgID,\x0d\012                         const char* szProgID,\x0d\x0a\t\t\t\t\t\t             const CLSID& libid);\x0d\x0a\x0d\x0a\x0d\012void RegisterInterface(HMODULE hModule,            // DLL module handle\x0d\012                       c"; if (iIndex == index) return buffer; index++;
      buffer = "onst CLSID& clsid,         // Class ID\x0d\012                       const char* szFriendlyName, // Friendly Name\x0d\x0a\t\t\t\t\t             const CLSID &libid,\x0d\x0a\t\t\t\t\t             const IID &iid);\x0d\x0a\x0d\012void Unregiste"; if (iIndex == index) return buffer; index++;
      oLength = 179;
      buffer = "rInterface(const IID &iid);\x0d\x0a\x0d\x0a\x0d\012HRESULT RegisterTypeLib(HINSTANCE hInstTypeLib, LPCOLESTR lpszIndex);\x0d\012HRESULT UnRegisterTypeLib(HINSTANCE hInstTypeLib, LPCOLESTR lpszIndex);\x0d\x0a\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "5fda834654489d09ffebac0d0a5238cf"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getRegistryHeaderFile() { static RegistryHeaderFile _instance; return _instance; }
}; //bin2cpp
