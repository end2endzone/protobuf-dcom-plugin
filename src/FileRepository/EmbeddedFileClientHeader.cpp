/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileClientHeader.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class ClientHeaderFile : public virtual bin2cpp::File
  {
  public:
    ClientHeaderFile() {}
    ~ClientHeaderFile() {}
    virtual size_t getSize() { return 1407; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 8; }
    virtual const char * getFilename() { return "DCOMPLUGIN_COMPONENT_NAMEClient.h"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      buffer = "#pragma once\x0d\x0a\x0d\012#include \"IComErrorProvider.h\"\x0d\012DCOMPLUGIN_ALL_SERVICES_INCLUDE_LIST\x0d\x0a\x0d\012namespace DCOMPLUGIN_PACKAGE_NAME {\x0d\x0a\x0d\012#ifdef DCOMPLUGIN_COMPONENT_NAME_CLIENT_EXPORTS\x0d\012#define DCOMPLUGIN_COMPO"; if (iIndex == index) return buffer; index++;
      buffer = "NENT_NAME_DLL_API __declspec(dllexport)\x0d\012#else\x0d\012#define DCOMPLUGIN_COMPONENT_NAME_DLL_API __declspec(dllimport)\x0d\012#endif\x0d\x0a\x0d\012///<summary>Client class for connection to DCOMPLUGIN_COMPONENT_NAMEServer.</"; if (iIndex == index) return buffer; index++;
      buffer = "summary>\x0d\012class DCOMPLUGIN_COMPONENT_NAME_DLL_API DCOMPLUGIN_COMPONENT_NAMEClient : public virtual IComErrorProvider, \x0d\012DCOMPLUGIN_ALL_SERVICES_VIRTUAL_IMPL\x0d\x0a\x0d\012{\x0d\012public:\x0d\012  DCOMPLUGIN_COMPONENT_NAMEC"; if (iIndex == index) return buffer; index++;
      buffer = "lient();\x0d\012  virtual ~DCOMPLUGIN_COMPONENT_NAMEClient();\x0d\x0a\x0d\012  ///<summary>Defines if the DCOMPLUGIN_COMPONENT_NAMEServer is available.</summary>\x0d\012  ///<returns>Returns true if the client is connected w"; if (iIndex == index) return buffer; index++;
      buffer = "ith the DCOMPLUGIN_COMPONENT_NAMEServer server. Returns false otherwise.</returns>\x0d\012  bool isConnected();\x0d\x0a\x0d\012  //DCOMPLUGIN_COMPONENT_NAMEProtoLib interfaces\x0d\x0a\x0d\012  //IComErrorProvider\x0d\012  virtual unsign"; if (iIndex == index) return buffer; index++;
      buffer = "ed int GetLastComErrorCode();\x0d\012  virtual std::string GetLastComErrorStr();\x0d\012  \x0d\012  DCOMPLUGIN_ALL_SERVICES_DECLARATION\x0d\x0a\x0d\012protected:\x0d\012  ///<summary>Error code returned by the last internal call to the "; if (iIndex == index) return buffer; index++;
      buffer = "server.</summary>\x0d\012  unsigned long mLastError;\x0d\x0a\x0d\012  ///<summary>DCOMPLUGIN_COMPONENT_NAMEClient private implementation pointer.</summary>\x0d\012  void * mInstance;\x0d\012};\x0d\x0a\x0d\012}  // namespace DCOMPLUGIN_PACKAGE"; if (iIndex == index) return buffer; index++;
      oLength = 7;
      buffer = "_NAME\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "29b5c2eec9401458a1aa0bf257d2bb30"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getClientHeaderFile() { static ClientHeaderFile _instance; return _instance; }
}; //bin2cpp
