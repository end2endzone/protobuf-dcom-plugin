/**
 * This file was generated by bin2cpp v2.2.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'DCOMPLUGIN_COMPONENT_NAMEServerMain.cpp', last modified 1552228002.
 * Do not modify this file.
 */
#include "EmbeddedFileServerMain.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class ServerMainFile : public virtual bin2cpp::File
  {
  public:
    ServerMainFile() { build(); }
    virtual ~ServerMainFile() {}
    virtual size_t getSize() const { return 2279; }
    virtual const char * getFilename() const { return "DCOMPLUGIN_COMPONENT_NAMEServerMain.cpp"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("// DCOMPLUGIN_COMPONENT_NAMEServerMain.cpp : Defines the entry point for the application.\r\n//\r\n\r\n#define WIN32_LEAN_AND_MEAN    // Exclude rarely-used stuff from Windows headers\r\n#include <windows.h>\r", 200);
      mBuffer.append("\n\r\n#include <objbase.h> // \r\n#include \"DCOMPLUGIN_COMPONENT_NAMEServer_h.h\"\r\n#include \"DCOMPLUGIN_COMPONENT_NAMEServer.h\"\r\n#include <stdio.h>\r\n\r\nint APIENTRY WinMain(HINSTANCE hInstance,\r\n            ", 200);
      mBuffer.append("         HINSTANCE hPrevInstance,\r\n                     LPSTR     lpCmdLine,\r\n                     int       nCmdShow)\r\n{\r\n  // register/unregister server on demand\r\n  //\r\n  char szUpperCommandLine[MA", 200);
      mBuffer.append("X_PATH];\r\n  strcpy (szUpperCommandLine, lpCmdLine); // copy command line and work with it.\r\n  _strupr (szUpperCommandLine);\r\n\r\n  //Detect silent flag\r\n  bool silent = false;\r\n  if (strstr(szUpperComma", 200);
      mBuffer.append("ndLine, \"-S\") || strstr(szUpperCommandLine, \"/S\"))\r\n  {\r\n    silent = true;\r\n  }\r\n\r\n  if (strstr (szUpperCommandLine, \"UNREGSERVER\"))\r\n  {\r\n    HRESULT hr = DllUnregisterServer();\r\n    if (SUCCEEDED(h", 200);
      mBuffer.append("r))\r\n    {\r\n      if (!silent)\r\n        MessageBox(NULL, \"Unregister completed\", \"Success\", MB_OK | MB_ICONINFORMATION);\r\n      return 0;\r\n    }\r\n    else\r\n    {\r\n      if (!silent)\r\n        MessageBo", 200);
      mBuffer.append("x(NULL, \"Unregister failed\", \"Error\", MB_OK | MB_ICONERROR);\r\n      return 1;\r\n    }\r\n  }\r\n  else if (strstr (szUpperCommandLine, \"REGSERVER\"))\r\n  {\r\n    HRESULT hr = DllRegisterServer();\r\n    if (SUC", 200);
      mBuffer.append("CEEDED(hr))\r\n    {\r\n      if (!silent)\r\n        MessageBox(NULL, \"Register completed\", \"Success\", MB_OK | MB_ICONINFORMATION);\r\n      return 0;\r\n    }\r\n    else\r\n    {\r\n      if (!silent)\r\n        Mes", 200);
      mBuffer.append("sageBox(NULL, \"Register failed\", \"Error\", MB_OK | MB_ICONERROR);\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  // initialize the COM library\r\n  ::CoInitialize(NULL);\r\n\r\n  // register ourself as a class object aga", 200);
      mBuffer.append("inst the internal COM table\r\n  // (this has nothing to do with the registry)\r\n  DWORD nToken = CoEXEInitialize();\r\n\r\n  // -- the message pump ----------------\r\n  //\r\n  // (loop ends if WM_QUIT message", 200);
      mBuffer.append(" is received)\r\n  //\r\n  MSG msg;\r\n  while (GetMessage(&msg, 0, 0, 0) > 0) \r\n  {\r\n    TranslateMessage(&msg);\r\n    DispatchMessage(&msg);\r\n  }\r\n\r\n  // unregister from the known table of class objects\r\n ", 200);
      mBuffer.append(" CoEXEUninitialize(nToken);\r\n\r\n  // \r\n  ::CoUninitialize();\r\n\r\n  return 0;\r\n}\r\n", 79);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getServerMainFile() { static ServerMainFile _instance; return _instance; }
}; //bin2cpp
