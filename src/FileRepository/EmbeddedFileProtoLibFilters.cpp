/**
 * This file was generated by bin2cpp v2.2.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'DCOMPLUGIN_COMPONENT_NAMEProtoLib.vcxproj.filters', last modified 1552228002.
 * Do not modify this file.
 */
#include "EmbeddedFileProtoLibFilters.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class ProtoLibFiltersFile : public virtual bin2cpp::File
  {
  public:
    ProtoLibFiltersFile() { build(); }
    virtual ~ProtoLibFiltersFile() {}
    virtual size_t getSize() const { return 2450; }
    virtual const char * getFilename() const { return "DCOMPLUGIN_COMPONENT_NAMEProtoLib.vcxproj.filters"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("\357\273\277<\?xml version=\"1.0\" encoding=\"utf-8\"\?>\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <Filter Include=\"Source Files\">\r\n      <UniqueId", 200);
      mBuffer.append("entifier>{4FC737F1-C7A5-4376-A066-2A32D752A2FF}</UniqueIdentifier>\r\n      <Extensions>cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx</Extensions>\r\n    </Filter>\r\n    <Filter Include=\"Header Files\">\r\n      ", 200);
      mBuffer.append("<UniqueIdentifier>{93995380-89BD-4b04-88EB-625FBE52EBFB}</UniqueIdentifier>\r\n      <Extensions>h;hpp;hxx;hm;inl;inc;xsd</Extensions>\r\n    </Filter>\r\n    <Filter Include=\"Resource Files\">\r\n      <Uniqu", 200);
      mBuffer.append("eIdentifier>{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}</UniqueIdentifier>\r\n      <Extensions>rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav;mfcribbon-ms</Extensions>\r\n    </Filt", 200);
      mBuffer.append("er>\r\n    <Filter Include=\"Proto Files\">\r\n      <UniqueIdentifier>{6340cb88-3eb8-415b-bbb0-95e85db92aa3}</UniqueIdentifier>\r\n    </Filter>\r\n    <Filter Include=\"Services\">\r\n      <UniqueIdentifier>{caa", 200);
      mBuffer.append("91ff0-ee16-4a3d-a372-c7965012e4ab}</UniqueIdentifier>\r\n    </Filter>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <None Include=\"DCOMPLUGIN_PROTO_FILE_NAME.proto\">\r\n      <Filter>Proto Files</Filter>\r\n    </No", 200);
      mBuffer.append("ne>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ClCompile Include=\"dcomplugin.pb.cc\">\r\n      <Filter>Proto Files</Filter>\r\n    </ClCompile>\r\n    <ClCompile Include=\"DCOMPLUGIN_PROTO_FILE_NAME.pb.cc\">\r\n      ", 200);
      mBuffer.append("<Filter>Proto Files</Filter>\r\n    </ClCompile>\r\n    <ClCompile Include=\"MessageSerializer.cpp\">\r\n      <Filter>Source Files</Filter>\r\n    </ClCompile>\r\n    <ClCompile Include=\"ErrorHandlers.cpp\">\r\n   ", 200);
      mBuffer.append("   <Filter>Source Files</Filter>\r\n    </ClCompile>\r\n    <ClCompile Include=\"Registry.cpp\">\r\n      <Filter>Source Files</Filter>\r\n    </ClCompile>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ClInclude Include", 200);
      mBuffer.append("=\"dcomplugin.pb.h\">\r\n      <Filter>Proto Files</Filter>\r\n    </ClInclude>\r\n    <ClInclude Include=\"DCOMPLUGIN_PROTO_FILE_NAME.pb.h\">\r\n      <Filter>Proto Files</Filter>\r\n    </ClInclude>\r\n    <ClInclu", 200);
      mBuffer.append("de Include=\"MessageSerializer.h\">\r\n      <Filter>Header Files</Filter>\r\n    </ClInclude>\r\n    <ClInclude Include=\"ErrorHandlers.h\">\r\n      <Filter>Header Files</Filter>\r\n    </ClInclude>\r\n    <ClInclu", 200);
      mBuffer.append("de Include=\"IComErrorProvider.h\">\r\n      <Filter>Header Files</Filter>\r\n    </ClInclude>\r\n    <ClInclude Include=\"Registry.h\">\r\n      <Filter>Header Files</Filter>\r\n    </ClInclude>\r\n    <DCOMPLUGIN_A", 200);
      mBuffer.append("LL_SERVICES_FILTERS />\r\n  </ItemGroup>\r\n</Project>", 50);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getProtoLibFiltersFile() { static ProtoLibFiltersFile _instance; return _instance; }
}; //bin2cpp
