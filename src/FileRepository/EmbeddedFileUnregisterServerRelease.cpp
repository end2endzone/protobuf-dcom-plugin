/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileUnregisterServerRelease.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class UnregisterServerReleaseFile : public virtual bin2cpp::File
  {
  public:
    UnregisterServerReleaseFile() {}
    ~UnregisterServerReleaseFile() {}
    virtual size_t getSize() { return 80; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 1; }
    virtual const char * getFilename() { return "UnregisterServerRelease.bat"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      oLength = 80;
      buffer = "@echo off\x0d\x0a\".\\Release\\DCOMPLUGIN_COMPONENT_NAMEServer.exe\" /unregserver\x0d\012pause\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "f7965e73437ddbba6a82ce45cebd7222"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getUnregisterServerReleaseFile() { static UnregisterServerReleaseFile _instance; return _instance; }
}; //bin2cpp
