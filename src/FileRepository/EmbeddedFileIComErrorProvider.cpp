/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileIComErrorProvider.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class IComErrorProviderFile : public virtual bin2cpp::File
  {
  public:
    IComErrorProviderFile() {}
    ~IComErrorProviderFile() {}
    virtual size_t getSize() { return 775; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 4; }
    virtual const char * getFilename() { return "IComErrorProvider.h"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      buffer = "#pragma once\x0d\x0a\x0d\012#include \"DCOMPLUGIN_PROTO_FILE_NAME.pb.h\"\x0d\x0a\x0d\012namespace DCOMPLUGIN_PACKAGE_NAME {\x0d\x0a\x0d\012class IComErrorProvider\x0d\012{\x0d\012public:\x0d\012  ///<summary>Returns the last error code that occured while p"; if (iIndex == index) return buffer; index++;
      buffer = "rocessing a COM call.</summary>\x0d\012  ///<returns>Returns 0 if not error occured. Returns a non-zero value when an error occured. See C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Include\\WinError."; if (iIndex == index) return buffer; index++;
      buffer = "h for details.</returns>\x0d\012  virtual unsigned int GetLastComErrorCode() = 0;\x0d\x0a\x0d\012  ///<summary>Returns an error message of the last error that occured while processing a COM call.</summary>\x0d\012  ///<retur"; if (iIndex == index) return buffer; index++;
      oLength = 175;
      buffer = "ns>Returns non-empty string describing the last error that occured.</returns>\x0d\012  virtual std::string GetLastComErrorStr() = 0;\x0d\012};\x0d\x0a\x0d\012}  // namespace DCOMPLUGIN_PACKAGE_NAME\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "5580183fb240e3c2b0dc50a0eaa2b8e5"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getIComErrorProviderFile() { static IComErrorProviderFile _instance; return _instance; }
}; //bin2cpp
