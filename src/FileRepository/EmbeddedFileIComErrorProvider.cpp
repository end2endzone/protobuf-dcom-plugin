/**
 * This file was generated by bin2cpp v2.2.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'IComErrorProvider.h', last modified 1552247130.
 * Do not modify this file.
 */
#include "EmbeddedFileIComErrorProvider.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class IComErrorProviderFile : public virtual bin2cpp::File
  {
  public:
    IComErrorProviderFile() { build(); }
    virtual ~IComErrorProviderFile() {}
    virtual size_t getSize() const { return 775; }
    virtual const char * getFilename() const { return "IComErrorProvider.h"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("#pragma once\r\n\r\n#include \"DCOMPLUGIN_PROTO_FILE_NAME.pb.h\"\r\n\r\nnamespace DCOMPLUGIN_PACKAGE_NAME {\r\n\r\nclass IComErrorProvider\r\n{\r\npublic:\r\n  ///<summary>Returns the last error code that occured while p", 200);
      mBuffer.append("rocessing a COM call.</summary>\r\n  ///<returns>Returns 0 if not error occured. Returns a non-zero value when an error occured. See C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v7.0A\\Include\\WinError.", 200);
      mBuffer.append("h for details.</returns>\r\n  virtual unsigned int GetLastComErrorCode() = 0;\r\n\r\n  ///<summary>Returns an error message of the last error that occured while processing a COM call.</summary>\r\n  ///<retur", 200);
      mBuffer.append("ns>Returns non-empty string describing the last error that occured.</returns>\r\n  virtual std::string GetLastComErrorStr() = 0;\r\n};\r\n\r\n}  // namespace DCOMPLUGIN_PACKAGE_NAME\r\n", 175);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getIComErrorProviderFile() { static IComErrorProviderFile _instance; return _instance; }
}; //bin2cpp
