/**
 * This file was generated by bin2cpp v2.2.0
 * Copyright (C) 2013-2019 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'MessageSerializer.h', last modified 1552247130.
 * Do not modify this file.
 */
#include "EmbeddedFileMessageSerializerHeader.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class MessageSerializerHeaderFile : public virtual bin2cpp::File
  {
  public:
    MessageSerializerHeaderFile() { build(); }
    virtual ~MessageSerializerHeaderFile() {}
    virtual size_t getSize() const { return 1584; }
    virtual const char * getFilename() const { return "MessageSerializer.h"; }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("#pragma once\r\n\r\n#define WIN32_LEAN_AND_MEAN    // Exclude rarely-used stuff from Windows headers\r\n#include <windows.h>\r\n#include <OAIdl.h>\r\n\r\n#include <google/protobuf/message_lite.h>\r\n\r\nnamespace DCO", 200);
      mBuffer.append("MPLUGIN_PACKAGE_NAME {\r\n\r\n///<summary>An enum defining how to encode a protobuf message to a VARIANT* or decoding a VARIANT* to a protbuf message.</summary>\r\nenum VariantFlavor\r\n{\r\n  CPLUSPLUS,\r\n  VBS", 200);
      mBuffer.append("CRIPT,\r\n};\r\n\r\n///<summary>Serializes a protobuf message to a VARIANT object using the given encoding flavor.</summary>\r\n///<param name=\"iMsg\">The protobuf message to serialize.</param>\r\n///<param name", 200);
      mBuffer.append("=\"iVariantFlavor\">The given flavor to use for encoding the VARIANT.</param>\r\n///<param name=\"oVar\">The output VARIANT which contains the serialized protobuf message.</param>\r\n///<returns>Returns a VAR", 200);
      mBuffer.append("IANT containing a serialized protobuf message.</returns>\r\nHRESULT SerializeMessageToVariant(const google::protobuf::MessageLite & iMsg, const VariantFlavor & iVariantFlavor, VARIANT & oVar);\r\n\r\n///<su", 200);
      mBuffer.append("mmary>Deserializes a VARIANT object into a given protobuf message.</summary>\r\n///<param name=\"iVar\">The input VARIANT which contains the serialized protobuf message.</param>\r\n\r\n///<param name=\"iMsg\">T", 200);
      mBuffer.append("he protobuf message to serialize.</param>\r\n///<param name=\"iVariantFlavor\">The given flavor to use for encoding the VARIANT.</param>\r\n///<returns>Returns a VARIANT containing a serialized protobuf mes", 200);
      mBuffer.append("sage.</returns>\r\nHRESULT DeserializeVariantToMessage(VARIANT & iVar, google::protobuf::MessageLite & oMsg, VariantFlavor & oVariantFlavor);\r\n\r\n}  // namespace DCOMPLUGIN_PACKAGE_NAME\r\n", 184);
    }
    virtual bool save(const char * iFilename) const
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      fwrite(buffer, 1, fileSize, f);
      fclose(f);
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getMessageSerializerHeaderFile() { static MessageSerializerHeaderFile _instance; return _instance; }
}; //bin2cpp
