/**
 * This file was generated by
 * bin2cpp v1.3.
 * Copyright (C) 2013-2014 end2endzone.com. All rights reserved.
 * Do not modify this file.
 */
#include ".\EmbeddedFileMessageSerializerHeader.h"
#include <stdio.h> //for FILE
#include <string> //for memcpy
namespace bin2cpp
{
  class MessageSerializerHeaderFile : public virtual bin2cpp::File
  {
  public:
    MessageSerializerHeaderFile() {}
    ~MessageSerializerHeaderFile() {}
    virtual size_t getSize() { return 1584; }
    virtual size_t getSegmentSize() { return 200; }
    virtual size_t getNumSegments() { return 8; }
    virtual const char * getFilename() { return "MessageSerializer.h"; }
    virtual const char * getSegment(size_t iIndex, size_t & oLength)
    {
      oLength = 0;
      if (iIndex >= getNumSegments())
        return NULL;
      const char * buffer = NULL;
      size_t index = 0;
      oLength = getSegmentSize();
      buffer = "#pragma once\x0d\x0a\x0d\012#define WIN32_LEAN_AND_MEAN    // Exclude rarely-used stuff from Windows headers\x0d\012#include <windows.h>\x0d\012#include <OAIdl.h>\x0d\x0a\x0d\012#include <google/protobuf/message_lite.h>\x0d\x0a\x0d\012namespace DCO"; if (iIndex == index) return buffer; index++;
      buffer = "MPLUGIN_PACKAGE_NAME {\x0d\x0a\x0d\012///<summary>An enum defining how to encode a protobuf message to a VARIANT* or decoding a VARIANT* to a protbuf message.</summary>\x0d\012enum VariantFlavor\x0d\012{\x0d\012  CPLUSPLUS,\x0d\012  VBS"; if (iIndex == index) return buffer; index++;
      buffer = "CRIPT,\x0d\012};\x0d\x0a\x0d\012///<summary>Serializes a protobuf message to a VARIANT object using the given encoding flavor.</summary>\x0d\012///<param name=\"iMsg\">The protobuf message to serialize.</param>\x0d\012///<param name"; if (iIndex == index) return buffer; index++;
      buffer = "=\"iVariantFlavor\">The given flavor to use for encoding the VARIANT.</param>\x0d\012///<param name=\"oVar\">The output VARIANT which contains the serialized protobuf message.</param>\x0d\012///<returns>Returns a VAR"; if (iIndex == index) return buffer; index++;
      buffer = "IANT containing a serialized protobuf message.</returns>\x0d\012HRESULT SerializeMessageToVariant(const google::protobuf::MessageLite & iMsg, const VariantFlavor & iVariantFlavor, VARIANT & oVar);\x0d\x0a\x0d\012///<su"; if (iIndex == index) return buffer; index++;
      buffer = "mmary>Deserializes a VARIANT object into a given protobuf message.</summary>\x0d\012///<param name=\"iVar\">The input VARIANT which contains the serialized protobuf message.</param>\x0d\x0a\x0d\012///<param name=\"iMsg\">T"; if (iIndex == index) return buffer; index++;
      buffer = "he protobuf message to serialize.</param>\x0d\012///<param name=\"iVariantFlavor\">The given flavor to use for encoding the VARIANT.</param>\x0d\012///<returns>Returns a VARIANT containing a serialized protobuf mes"; if (iIndex == index) return buffer; index++;
      oLength = 184;
      buffer = "sage.</returns>\x0d\012HRESULT DeserializeVariantToMessage(VARIANT & iVar, google::protobuf::MessageLite & oMsg, VariantFlavor & oVariantFlavor);\x0d\x0a\x0d\012}  // namespace DCOMPLUGIN_PACKAGE_NAME\x0d\x0a"; if (iIndex == index) return buffer; index++;
      oLength = 0;
      return NULL;
    }
    virtual const char * getMd5() { return "2ea58b897350caaa5fa96d38f4d931a3"; }
    virtual char * newBuffer()
    {
      size_t size = getSize();
      char * buffer = new char[size];
      if (buffer == NULL)
        return NULL;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      size_t index = 0;
      for(size_t i=0; i<numSegments; i++)
      {
        const char * segmentBuffer = getSegment(i, segmentLength);
        memcpy(&buffer[index], segmentBuffer, segmentLength);
        index += segmentLength;
      }
      return buffer;
    }
    virtual bool save(const char * iFilename)
    {
      FILE * f = fopen(iFilename, "wb");
      if (!f) return false;
      size_t numSegments = getNumSegments();
      size_t segmentLength = 0;
      const char * buffer = NULL;
      for(size_t i=0; i<numSegments; i++)
      {
        buffer = getSegment(i, segmentLength);
        fwrite(buffer, 1, segmentLength, f);
      }
      fclose(f);
      return true;
    }
  };
  File & getMessageSerializerHeaderFile() { static MessageSerializerHeaderFile _instance; return _instance; }
}; //bin2cpp
