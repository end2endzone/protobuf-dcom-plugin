// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestDemo.proto

#ifndef PROTOBUF_TestDemo_2eproto__INCLUDED
#define PROTOBUF_TestDemo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcomplugin.pb.h"
// @@protoc_insertion_point(includes)

namespace testdemo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TestDemo_2eproto();
void protobuf_AssignDesc_TestDemo_2eproto();
void protobuf_ShutdownFile_TestDemo_2eproto();

class VoidMessage;
class SequentialNumber;
class HelloRequest;
class HelloResponse;

// ===================================================================

class VoidMessage : public ::google::protobuf::Message {
 public:
  VoidMessage();
  virtual ~VoidMessage();

  VoidMessage(const VoidMessage& from);

  inline VoidMessage& operator=(const VoidMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoidMessage& default_instance();

  void Swap(VoidMessage* other);

  // implements Message ----------------------------------------------

  VoidMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoidMessage& from);
  void MergeFrom(const VoidMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:testdemo.VoidMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_TestDemo_2eproto();
  friend void protobuf_AssignDesc_TestDemo_2eproto();
  friend void protobuf_ShutdownFile_TestDemo_2eproto();

  void InitAsDefaultInstance();
  static VoidMessage* default_instance_;
};
// -------------------------------------------------------------------

class SequentialNumber : public ::google::protobuf::Message {
 public:
  SequentialNumber();
  virtual ~SequentialNumber();

  SequentialNumber(const SequentialNumber& from);

  inline SequentialNumber& operator=(const SequentialNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SequentialNumber& default_instance();

  void Swap(SequentialNumber* other);

  // implements Message ----------------------------------------------

  SequentialNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SequentialNumber& from);
  void MergeFrom(const SequentialNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:testdemo.SequentialNumber)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TestDemo_2eproto();
  friend void protobuf_AssignDesc_TestDemo_2eproto();
  friend void protobuf_ShutdownFile_TestDemo_2eproto();

  void InitAsDefaultInstance();
  static SequentialNumber* default_instance_;
};
// -------------------------------------------------------------------

class HelloRequest : public ::google::protobuf::Message {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();

  void Swap(HelloRequest* other);

  // implements Message ----------------------------------------------

  HelloRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:testdemo.HelloRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TestDemo_2eproto();
  friend void protobuf_AssignDesc_TestDemo_2eproto();
  friend void protobuf_ShutdownFile_TestDemo_2eproto();

  void InitAsDefaultInstance();
  static HelloRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelloResponse : public ::google::protobuf::Message {
 public:
  HelloResponse();
  virtual ~HelloResponse();

  HelloResponse(const HelloResponse& from);

  inline HelloResponse& operator=(const HelloResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloResponse& default_instance();

  void Swap(HelloResponse* other);

  // implements Message ----------------------------------------------

  HelloResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloResponse& from);
  void MergeFrom(const HelloResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string greetings = 1;
  inline bool has_greetings() const;
  inline void clear_greetings();
  static const int kGreetingsFieldNumber = 1;
  inline const ::std::string& greetings() const;
  inline void set_greetings(const ::std::string& value);
  inline void set_greetings(const char* value);
  inline void set_greetings(const char* value, size_t size);
  inline ::std::string* mutable_greetings();
  inline ::std::string* release_greetings();
  inline void set_allocated_greetings(::std::string* greetings);

  // @@protoc_insertion_point(class_scope:testdemo.HelloResponse)
 private:
  inline void set_has_greetings();
  inline void clear_has_greetings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* greetings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TestDemo_2eproto();
  friend void protobuf_AssignDesc_TestDemo_2eproto();
  friend void protobuf_ShutdownFile_TestDemo_2eproto();

  void InitAsDefaultInstance();
  static HelloResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// VoidMessage

// -------------------------------------------------------------------

// SequentialNumber

// required int32 value = 1;
inline bool SequentialNumber::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SequentialNumber::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SequentialNumber::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SequentialNumber::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 SequentialNumber::value() const {
  return value_;
}
inline void SequentialNumber::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// HelloRequest

// required string name = 1;
inline bool HelloRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HelloRequest::name() const {
  return *name_;
}
inline void HelloRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HelloRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HelloRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HelloResponse

// required string greetings = 1;
inline bool HelloResponse::has_greetings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloResponse::set_has_greetings() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloResponse::clear_has_greetings() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloResponse::clear_greetings() {
  if (greetings_ != &::google::protobuf::internal::kEmptyString) {
    greetings_->clear();
  }
  clear_has_greetings();
}
inline const ::std::string& HelloResponse::greetings() const {
  return *greetings_;
}
inline void HelloResponse::set_greetings(const ::std::string& value) {
  set_has_greetings();
  if (greetings_ == &::google::protobuf::internal::kEmptyString) {
    greetings_ = new ::std::string;
  }
  greetings_->assign(value);
}
inline void HelloResponse::set_greetings(const char* value) {
  set_has_greetings();
  if (greetings_ == &::google::protobuf::internal::kEmptyString) {
    greetings_ = new ::std::string;
  }
  greetings_->assign(value);
}
inline void HelloResponse::set_greetings(const char* value, size_t size) {
  set_has_greetings();
  if (greetings_ == &::google::protobuf::internal::kEmptyString) {
    greetings_ = new ::std::string;
  }
  greetings_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HelloResponse::mutable_greetings() {
  set_has_greetings();
  if (greetings_ == &::google::protobuf::internal::kEmptyString) {
    greetings_ = new ::std::string;
  }
  return greetings_;
}
inline ::std::string* HelloResponse::release_greetings() {
  clear_has_greetings();
  if (greetings_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = greetings_;
    greetings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HelloResponse::set_allocated_greetings(::std::string* greetings) {
  if (greetings_ != &::google::protobuf::internal::kEmptyString) {
    delete greetings_;
  }
  if (greetings) {
    set_has_greetings();
    greetings_ = greetings;
  } else {
    clear_has_greetings();
    greetings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace testdemo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestDemo_2eproto__INCLUDED
